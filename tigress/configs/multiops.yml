description: multi-operation-experiment
params: ["--Seed=1"]
args:
  # single or multiple (separated by colon) function to obfuscate
  func: OBF_FUNC

  # options to postprocess obfuscated code
  cleanup_kinds: removeUnusedFunctions

  # number of opaque data stuructures per program
  num_opaques: 2

templates:
  # insert code that we never execute. this is done by introducing if-statements
  # with condition on boolean and integer expressions that have a known value
  - name: dead-code-insertion-base
    procedure:
      - ["--Transform=InitEntropy", "--Functions={func}", "--InitEntropyKinds=vars",
          "--Transform=InitOpaque", "--Functions={func}", "--InitOpaqueCount={num_opaques}", "--InitOpaqueStructs={opaque_structs}",
          # "--Transform=UpdateOpaque", "--Functions={func}",
          "--Transform=AddOpaque", "--Functions={func}", "--AddOpaqueKinds={opaque_kinds}", "--AddOpaqueCount={num_opaque_per_function}", "--AddOpaqueStructs={opaque_structs}",
          "--Transform=CleanUp", "--CleanUpKinds={cleanup_kinds}"]

  # split up basic blocks and rearrange into multiple basic blocks with
  # opaque predicates and gotos connecting them.
  # the implementation here is flattening + deadcode insertion
  - name: block-fission-base
    procedure:
      - ["--Transform=Flatten", "--FlattenSplitBasicBlocks=true", "--Functions={func}",
          "--Transform=InitEntropy", "--Functions={func}", "--InitEntropyKinds=vars",
          "--Transform=InitOpaque", "--Functions={func}", "--InitOpaqueCount={num_opaques}", "--InitOpaqueStructs={opaque_structs}",
          "--Transform=AddOpaque", "--Functions={func}", "--AddOpaqueKinds={opaque_kinds}", "--AddOpaqueCount={num_opaque_per_function}", "--AddOpaqueStructs={opaque_structs}",
          "--Transform=CleanUp", "--CleanUpKinds={cleanup_kinds}"]
  
    # removes structured control flow
  - name: flatten-base
    procedure:
      - ["--Transform=Flatten", "--FlattenSplitBasicBlocks={split_basic_blocks}", "--Functions={func}",
                                "--FlattenDispatch={dispatch}",
                                "--FlattenNumberOfBlocksPerFunction={num_block_per_func}",
                                "--FlattenConditionalKinds={conditional_kinds}",
                                "--FlattenRandomizeBlocks={randomize_blocks}",
                                "--FlattenObfuscateNext={obfuscate_next}",
          "--Transform=CleanUp", "--CleanUpKinds={cleanup_kinds}"]
    format: true

variants:
  - name: flatten-twice-and-deadcode
    use:
      - template: flatten-base
        args:
          dispatch: goto
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch
      - template: flatten-base
        args:
          dispatch: switch
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch
      - template: dead-code-insertion-base
        args:
          num_opaque_per_function: 5
          opaque_structs: env,list # list, array, input, env, *
          opaque_kinds: call,bug,true,junk,question # call, bug, true, junk, fake, question, *
  
  - name: flatten-twice-1
    use:
      - template: flatten-base
        args:
          dispatch: goto
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch
      - template: flatten-base
        args:
          dispatch: switch
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch
  
  - name: flatten-twice-2
    use:
      - template: flatten-base
        args:
          dispatch: call
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch
      - template: flatten-base
        args:
          dispatch: switch
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch
  
  - name: flatten-twice-3
    use:
      - template: flatten-base
        args:
          dispatch: call
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch
      - template: flatten-base
        args:
          dispatch: call
          num_block_per_func: 1
          split_basic_blocks: true
          randomize_blocks: true
          obfuscate_next: false
          conditional_kinds: branch

  
  # - name: flatten-once-and-deadcode
  #   use:
  #     - template: flatten
  #     - template: dead-code-insertion-base
  #       args:
  #         num_opaque_per_function: 5
  #         opaque_structs: env,list # list, array, input, env, *
  #         opaque_kinds: call,bug,true,junk,question # call, bug, true, junk, fake, question, *

  # - name: block-fission-and-flatten
  #   use:
  #     - template: block-fission-base
  #       args:
  #         num_opaque_per_function: 2
  #         opaque_structs: env,list
  #         opaque_kinds: call,bug,true,junk,question # call, bug, true, junk, fake, question, *
  #     - template: flatten